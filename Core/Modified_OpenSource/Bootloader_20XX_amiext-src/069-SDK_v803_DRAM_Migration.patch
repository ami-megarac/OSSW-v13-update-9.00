diff -Naur uboot_org/arch/arm/include/asm/arch-aspeed/sdram_ast2600.h uboot/arch/arm/include/asm/arch-aspeed/sdram_ast2600.h
--- uboot_org/arch/arm/include/asm/arch-aspeed/sdram_ast2600.h	2020-11-20 17:00:27.000000000 +0800
+++ uboot/arch/arm/include/asm/arch-aspeed/sdram_ast2600.h	2022-11-16 15:50:03.268443755 +0800
@@ -104,6 +104,10 @@
 #define SDRAM_FORCE_PRECHARGE_EN	BIT(4)
 #define SDRAM_REFRESH_EN		BIT(0)
 
+/* MCR14 */
+#define SDRAM_WL_SETTING		GENMASK(23, 20)
+#define SDRAM_CL_SETTING		GENMASK(19, 16)
+
 #define SDRAM_TEST_LEN_SHIFT		4
 #define SDRAM_TEST_LEN_MASK		0xfffff
 #define SDRAM_TEST_START_ADDR_SHIFT	24
diff -Naur uboot_org/drivers/ram/aspeed/Kconfig uboot/drivers/ram/aspeed/Kconfig
--- uboot_org/drivers/ram/aspeed/Kconfig	2022-11-16 15:32:18.517291051 +0800
+++ uboot/drivers/ram/aspeed/Kconfig	2022-11-16 15:50:03.284443289 +0800
@@ -66,7 +66,13 @@
 
 choice
 	prompt "DDR4 PHY side ODT"
-	default ASPEED_DDR4_PHY_ODT40
+	default ASPEED_DDR4_PHY_ODT80
+
+config ASPEED_DDR4_PHY_ODT80
+	bool "DDR4 PHY side ODT 80 ohm"
+	depends on DM && OF_CONTROL && ARCH_ASPEED
+	help
+	  select DDR4 PHY side ODT 80 ohm
 
 config ASPEED_DDR4_PHY_ODT60
 	bool "DDR4 PHY side ODT 60 ohm"
@@ -89,7 +95,13 @@
 
 choice
 	prompt "DDR4 DRAM side ODT"
-	default ASPEED_DDR4_DRAM_ODT40
+	default ASPEED_DDR4_DRAM_ODT48
+
+config ASPEED_DDR4_DRAM_ODT80
+	bool "DDR4 DRAM side ODT 80 ohm"
+	depends on DM && OF_CONTROL && ARCH_ASPEED
+	help
+	  select DDR4 DRAM side ODT 80 ohm
 
 config ASPEED_DDR4_DRAM_ODT60
 	bool "DDR4 DRAM side ODT 60 ohm"
@@ -109,4 +121,29 @@
 	help
 	  select DDR4 DRAM side ODT 40 ohm
 endchoice
+
+choice
+	prompt "DDR4 DRAM output driver impedance"
+	default ASPEED_DDR4_DRAM_RON_34
+
+config ASPEED_DDR4_DRAM_RON_34
+	bool "DDR4 DRAM output driver impedance 34 ohm"
+	depends on DM && OF_CONTROL && ARCH_ASPEED
+	help
+	  select DDR4 DRAM output driver impedance 34 ohm
+
+config ASPEED_DDR4_DRAM_RON_48
+	bool "DDR4 DRAM output driver impedance 48 ohm"
+	depends on DM && OF_CONTROL && ARCH_ASPEED
+	help
+	  select DDR4 DRAM output driver impedance 48 ohm
+endchoice
+
+config ASPEED_DDR4_WR_DATA_EYE_TRAINING_RESULT_OFFSET
+	hex "DDR PHY write data eye training result offset"
+	default 0x10
+	help
+	  The offset value applied to the DDR PHY write data eye training result
+	  to fine-tune the write DQ/DQS alignment. Please don't change it if you
+	  are not sure what is the best value in your system.
 endif
diff -Naur uboot_org/drivers/ram/aspeed/sdram_ast2600.c uboot/drivers/ram/aspeed/sdram_ast2600.c
--- uboot_org/drivers/ram/aspeed/sdram_ast2600.c	2022-11-16 15:32:18.517291051 +0800
+++ uboot/drivers/ram/aspeed/sdram_ast2600.c	2022-11-16 15:50:03.268443755 +0800
@@ -17,6 +17,8 @@
 #include <linux/err.h>
 #include <linux/kernel.h>
 #include <dt-bindings/clock/ast2600-clock.h>
+#include <linux/bitfield.h>
+#include <linux/bitops.h>
 #include "sdram_phy_ast2600.h"
 
 /* in order to speed up DRAM init time, write pre-defined values to registers
@@ -114,10 +116,11 @@
 #define SEARCH_RDWIN_PTRN_SUM   0xbcf02355
 #else
 /* mode register setting for real chip are derived from the model GDDR4-1600 */
-#define DDR4_MR01_MODE		(MR01_DRAM_ODT | 0x00010510)
-#define DDR4_MR23_MODE		0x00000000
-#define DDR4_MR45_MODE		0x04000000
-#define DDR4_MR6_MODE           0x00000400
+#define DDR4_MR01_MODE		((MR1_VAL << 16) | MR0_VAL)
+#define DDR4_MR23_MODE		((MR3_VAL << 16) | MR2_VAL)
+#define DDR4_MR45_MODE		((MR5_VAL << 16) | MR4_VAL)
+#define DDR4_MR6_MODE		MR6_VAL
+
 #define DDR4_TRFC_1600		0x467299f1
 #define DDR4_TRFC_1333		0x3a5f80c9
 #define DDR4_TRFC_800		0x23394c78
@@ -213,19 +216,9 @@
 
 	while (1) {
 		data = readl(&regs->phy_ctrl[0]) & SDRAM_PHYCTRL0_INIT;
-		if (~data) {
+		if (data == 0)
 			break;
-		}
 	}
-
-#if 0
-	while (1) {
-		data = readl(0x1e6e0400) & BIT(1);
-		if (data) {
-			break;
-		}
-	}
-#endif
 #endif
 }
 
@@ -285,82 +278,84 @@
 	debug("\nSDRAM PHY training report:\n");
 	/* training status */
 	value = readl(reg_base + 0x00);
-	debug("rO_DDRPHY_reg offset 0x00 = 0x%08x\n", value);
-	if (value & BIT(3)) {
+	debug("\nrO_DDRPHY_reg offset 0x00 = 0x%08x\n", value);
+	if (value & BIT(3))
 		debug("\tinitial PVT calibration fail\n");
-	}
-	if (value & BIT(5)) {
+
+	if (value & BIT(5))
 		debug("\truntime calibration fail\n");
-	}
 
 	/* PU & PD */
 	value = readl(reg_base + 0x30);
-	debug("rO_DDRPHY_reg offset 0x30 = 0x%08x\n", value);
-	debug("  PU = 0x%02x\n", value & 0xff);
-	debug("  PD = 0x%02x\n", (value >> 16) & 0xff);
+	debug("\nrO_DDRPHY_reg offset 0x30 = 0x%08x\n", value);
+	debug("  PU = 0x%02lx\n", FIELD_GET(GENMASK(7, 0), value));
+	debug("  PD = 0x%02lx\n", FIELD_GET(GENMASK(23, 16), value));
 
 	/* read eye window */
 	value = readl(reg_base + 0x68);
-	if (0 == (value & GENMASK(7, 0))) {
+	if (FIELD_GET(GENMASK(7, 0), value) == 0)
 		need_retrain = 1;
-	}
 
-	debug("rO_DDRPHY_reg offset 0x68 = 0x%08x\n", value);
+	debug("\nrO_DDRPHY_reg offset 0x68 = 0x%08x\n", value);
 	debug("  rising edge of read data eye training pass window\n");
-	tmp = (((value & GENMASK(7, 0)) >> 0) * 100) / 255;
+	tmp = FIELD_GET(GENMASK(7, 0), value) * 100 / 255;
 	debug("    B0:%d%%\n", tmp);
-	tmp = (((value & GENMASK(15, 8)) >> 8) * 100) / 255;
+	tmp = FIELD_GET(GENMASK(15, 8), value) * 100 / 255;
 	debug("    B1:%d%%\n", tmp);
 
 	value = readl(reg_base + 0xC8);
-	debug("rO_DDRPHY_reg offset 0xC8 = 0x%08x\n", value);
+	debug("\nrO_DDRPHY_reg offset 0xC8 = 0x%08x\n", value);
 	debug("  falling edge of read data eye training pass window\n");
-	tmp = (((value & GENMASK(7, 0)) >> 0) * 100) / 255;
+	tmp = FIELD_GET(GENMASK(7, 0), value) * 100 / 255;
 	debug("    B0:%d%%\n", tmp);
-	tmp = (((value & GENMASK(15, 8)) >> 8) * 100) / 255;
+	tmp = FIELD_GET(GENMASK(15, 8), value) * 100 / 255;
 	debug("    B1:%d%%\n", tmp);
 
 	/* write eye window */
 	value = readl(reg_base + 0x7c);
-	if (0 == (value & GENMASK(7, 0))) {
+	if (FIELD_GET(GENMASK(7, 0), value) == 0)
 		need_retrain = 1;
-	}
 
-	debug("rO_DDRPHY_reg offset 0x7C = 0x%08x\n", value);
-	debug("  rising edge of write data eye training pass window\n");
-	tmp = (((value & GENMASK(7, 0)) >> 0) * 100) / 255;
+	debug("\nrO_DDRPHY_reg offset 0x7C = 0x%08x\n", value);
+	debug("  write data eye training pass window\n");
+	tmp = FIELD_GET(GENMASK(7, 0), value) * 100 / 255;
 	debug("    B0:%d%%\n", tmp);
-	tmp = (((value & GENMASK(15, 8)) >> 8) * 100) / 255;
+	tmp = FIELD_GET(GENMASK(15, 8), value) * 100 / 255;
 	debug("    B1:%d%%\n", tmp);
 
 	/* read Vref (PHY side) training result */
 	value = readl(reg_base + 0x88);
-	debug("rO_DDRPHY_reg offset 0x88 = 0x%08x\n", value);
+	debug("\nrO_DDRPHY_reg offset 0x88 = 0x%08x\n", value);
+	debug("  Read VrefDQ training result\n");
+	tmp = FIELD_GET(GENMASK(7, 0), value) * 10000 / 128;
+	debug("    B0:%d.%d%%\n", tmp / 100, tmp % 100);
+	tmp = FIELD_GET(GENMASK(15, 8), value) * 10000 / 128;
+	debug("    B1:%d.%d%%\n", tmp / 100, tmp % 100);
 
 	/* write Vref (DRAM side) training result */
 	value = readl(reg_base + 0x90);
-	debug("rO_DDRPHY_reg offset 0x90 = 0x%08x\n", value);
+	debug("\nrO_DDRPHY_reg offset 0x90 = 0x%08x\n", value);
+	tmp = readl(info->phy_setting + 0x60) & BIT(6);
+	if (tmp) {
+		value = 4500 + 65 * value;
+		debug("  Write Vref training result: %d.%d%% (range 2)\n",
+		      value / 100, value % 100);
+	} else {
+		value = 6000 + 65 * value;
+		debug("  Write Vref training result: %d.%d%% (range 1)\n",
+		      value / 100, value % 100);
+	}
 
 	/* gate train */
 	value = readl(reg_base + 0x50);
-	if ((0 == (value & GENMASK(15, 0))) ||
-	    (0 == (value & GENMASK(31, 16)))) {
+	debug("\nrO_DDRPHY_reg offset 0x50 = 0x%08x\n", value);
+	if ((FIELD_GET(GENMASK(15, 0), value) == 0) ||
+	    (FIELD_GET(GENMASK(31, 16), value) == 0))
 		need_retrain = 1;
-	}
-#if 0
-	if (((value >> 24) & 0xff) < 3)
-		need_retrain = 1;
-	else
-		need_retrain = 0;
-#endif
-	debug("rO_DDRPHY_reg offset 0x50 = 0x%08x\n", value);
-#if 0
+
 	debug("  gate training pass window\n");
-	tmp = (((value & GENMASK(7, 0)) >> 0) * 100) / 255;
-	debug("    module 0: %d.%03d\n", (value >> 8) & 0xff, tmp);
-        tmp = (((value & GENMASK(23, 16)) >> 0) * 100) / 255;
-	debug("    module 1: %d.%03d\n", (value >> 24) & 0xff, tmp);
-#endif
+	debug("    module 0: 0x%04lx\n", FIELD_GET(GENMASK(15, 0), value));
+	debug("    module 1: 0x%04lx\n", FIELD_GET(GENMASK(31, 16), value));
 
 	return need_retrain;
 #else
@@ -773,6 +768,7 @@
 static void ast2600_sdrammc_common_init(struct ast2600_sdrammc_regs *regs)
 {
 	int i;
+	u32 reg;
 
 	writel(MCR34_MREQI_DIS | MCR34_RESETN_DIS, &regs->power_ctrl);
 	writel(SDRAM_VIDEO_UNLOCK_KEY, &regs->gm_protection_key);
@@ -812,6 +808,13 @@
 	for (i = 0; i < ARRAY_SIZE(ddr4_ac_timing); ++i)
 		writel(ddr4_ac_timing[i], &regs->ac_timing[i]);
 
+	/* update CL and WL */
+	reg = readl(&regs->ac_timing[1]);
+	reg &= ~(SDRAM_WL_SETTING | SDRAM_CL_SETTING);
+	reg |= FIELD_PREP(SDRAM_WL_SETTING, CONFIG_WL - 5) |
+	       FIELD_PREP(SDRAM_CL_SETTING, CONFIG_RL - 5);
+	writel(reg, &regs->ac_timing[1]);
+
 	writel(DDR4_MR01_MODE, &regs->mr01_mode_setting);
 	writel(DDR4_MR23_MODE, &regs->mr23_mode_setting);
 	writel(DDR4_MR45_MODE, &regs->mr45_mode_setting);
@@ -965,11 +968,6 @@
 
 #if defined(CONFIG_FPGA_ASPEED) || defined(CONFIG_ASPEED_PALLADIUM)
 	ast2600_sdrammc_search_read_window(priv);
-#else
-	/* make sure DDR-PHY is ready before access */
-	do {
-		reg = readl(priv->phy_status) & BIT(1);
-	} while (reg == 0);
 #endif
 
 	ret = ast2600_sdramphy_check_status(priv);
diff -Naur uboot_org/drivers/ram/aspeed/sdram_phy_ast2600.h uboot/drivers/ram/aspeed/sdram_phy_ast2600.h
--- uboot_org/drivers/ram/aspeed/sdram_phy_ast2600.h	2022-11-16 15:32:18.517291051 +0800
+++ uboot/drivers/ram/aspeed/sdram_phy_ast2600.h	2022-11-16 15:50:03.284443289 +0800
@@ -2,34 +2,140 @@
 #define DDR_PHY_TBL_END                 0xaeededed
 
 /**
+ * phyr030[18:16] - Ron PU (PHY side)
+ * phyr030[14:12] - Ron PD (PHY side)
+ *   b'000 : disable
+ *   b'001 : 240 ohm
+ *   b'010 : 120 ohm
+ *   b'011 : 80 ohm
+ *   b'100 : 60 ohm
+ *   b'101 : 48 ohm
+ *   b'110 : 40 ohm
+ *   b'111 : 34 ohm (default)
+ *
+ */
+#define PHY_RON				((0x7 << 16) | (0x7 << 12))
+
+/**
  * phyr030[10:8] - ODT configuration (PHY side)
  *   b'000 : ODT disabled
+ *   b'001 : 240 ohm
+ *   b'010 : 120 ohm
+ *   b'011 : 80 ohm (default)
  *   b'100 : 60 ohm
  *   b'101 : 48 ohm
- *   b'110 : 40 ohm (default)
+ *   b'110 : 40 ohm
+ *   b'111 : 34 ohm
  */
-#if defined(CONFIG_ASPEED_DDR4_PHY_ODT60)
-#define PHY_ODT			(0x4 << 8)
+#if defined(CONFIG_ASPEED_DDR4_PHY_ODT40)
+#define PHY_ODT			(0x6 << 8)
 #elif defined(CONFIG_ASPEED_DDR4_PHY_ODT48)
 #define PHY_ODT			(0x5 << 8)
+#elif defined(CONFIG_ASPEED_DDR4_PHY_ODT60)
+#define PHY_ODT			(0x4 << 8)
 #else
-#define PHY_ODT			(0x6 << 8)
+#define PHY_ODT			(0x3 << 8)
+#endif
+
+/**
+ * MR1[2:1] output driver impedance
+ *   b'00 : 34 ohm (default)
+ *   b'01 : 48 ohm
+ */
+#ifdef CONFIG_ASPEED_DDR4_DRAM_RON_48
+#define DRAM_RON			(0x1 << 1)
+#else
+#define DRAM_RON			(0x0 << 1)
 #endif
 
 /**
- * phyr058[10:8] - ODT configuration (DRAM side)
+ * DRAM ODT - synchronous ODT mode
+ *   RTT_WR: disable
+ *   RTT_NOM = RTT_PARK
+ *
+ * MR1[10:8] RTT_NOM
+ *   b'000 : RTT_NOM disable
  *   b'001 : 60 ohm
- *   b'101 : 48 ohm
- *   b'011 : 40 ohm (default)
+ *   b'010 : 120 ohm
+ *   b'011 : 40 ohm
+ *   b'100 : 240 ohm
+ *   b'101 : 48 ohm  (default)
+ *   b'110 : 80 ohm
+ *   b'111 : 34 ohm
+ *
+ * MR5[8:6] RTT_PARK
+ *   b'000 : RTT_PARK disable
+ *   b'001 : 60 ohm
+ *   b'010 : 120 ohm
+ *   b'011 : 40 ohm
+ *   b'100 : 240 ohm
+ *   b'101 : 48 ohm  (default)
+ *   b'110 : 80 ohm
+ *   b'111 : 34 ohm
+ *
+ * MR2[11:9] RTT_WR
+ *   b'000 : Dynamic ODT off  (default)
+ *   b'001 : 120 ohm
+ *   b'010 : 240 ohm
+ *   b'011 : Hi-Z
+ *   b'100 : 80 ohm
  */
-#if defined(CONFIG_ASPEED_DDR4_DRAM_ODT60)
-#define DRAM_ODT			(0x1 << 8)
+#define RTT_WR				(0x0 << 9)
+
+#if defined(CONFIG_ASPEED_DDR4_DRAM_ODT80)
+#define RTT_NOM				(0x6 << 8)
+#define RTT_PARK			(0x6 << 6)
+#elif defined(CONFIG_ASPEED_DDR4_DRAM_ODT60)
+#define RTT_NOM				(0x1 << 8)
+#define RTT_PARK			(0x1 << 6)
 #elif defined(CONFIG_ASPEED_DDR4_DRAM_ODT48)
-#define DRAM_ODT			(0x5 << 8)
+#define RTT_NOM				(0x5 << 8)
+#define RTT_PARK			(0x5 << 6)
 #else
-#define DRAM_ODT			(0x3 << 8)
+#define RTT_NOM				(0x3 << 8)
+#define RTT_PARK			(0x3 << 6)
 #endif
 
+/**
+ * MR6[6] VrefDQ training range
+ *   b'0 : range 1
+ *   b'1 : range 2 (default)
+ */
+#define VREFDQ_RANGE_2			BIT(6)
+
+/**
+ * Latency setting:
+ * Force AL = PL = 0
+ * -> WL = AL + CWL + PL = CWL
+ * -> RL = AL + CL + PL = CL
+ */
+#define CONFIG_WL			9
+#define CONFIG_RL			12
+#define T_RDDATA_EN			((CONFIG_RL - 2) << 8)
+#define T_PHY_WRLAT			(CONFIG_WL - 2)
+
+/* MR0 */
+#define MR0_CL_12			(BIT(4) | BIT(2))	/*  new */
+#define MR0_WR12_RTP6			BIT(9)
+#define MR0_DLL_RESET			BIT(8)
+#define MR0_VAL				(MR0_CL_12 | MR0_WR12_RTP6 | MR0_DLL_RESET)
+
+/* MR1 */
+#define MR1_VAL				(0x0001 | RTT_NOM | DRAM_RON)
+
+/* MR2 */
+#define MR2_CWL_9			0
+#define MR2_VAL				(0x0000 | RTT_WR | MR2_CWL_9)
+
+/* MR3 ~ MR6 */
+#define MR3_VAL				0x0000
+#define MR4_VAL				0x0000
+#define MR5_VAL				(0x0400 | RTT_PARK)
+#define MR6_VAL				0x0400
+
+#define WR_DATA_EYE_OFFSET                                                     \
+	(CONFIG_ASPEED_DDR4_WR_DATA_EYE_TRAINING_RESULT_OFFSET << 8)
+
 #if defined(CONFIG_ASPEED_DDR4_800)
 u32 ast2600_sdramphy_config[165] = {
 	0x1e6e0100,	// start address
@@ -45,7 +151,7 @@
 	0x20000000,	// phyr024
 	0x00000008,	// phyr028
 	0x00000000,	// phyr02c
-	(0x00077000 | PHY_ODT),	// phyr030
+	(PHY_RON | PHY_ODT),	/* phyr030 */
 	0x00000000,	// phyr034
 	0x00000000,	// phyr038
 	0x20000000,	// phyr03c
@@ -54,18 +160,18 @@
 	0x00002f07,	// phyr048
 	0x00003080,	// phyr04c
 	0x04000000,	// phyr050
-	0x00000200,	// phyr054
-	(0x03140001 | DRAM_ODT),	// phyr058
-	0x04800000,	// phyr05c
-	0x0800044e,	// phyr060
+	((MR3_VAL << 16) | MR2_VAL),	/* phyr054 */
+	((MR0_VAL << 16) | MR1_VAL),	/* phyr058 */
+	((MR5_VAL << 16) | MR4_VAL),	/* phyr05c */
+	((0x0800 << 16) | MR6_VAL | VREFDQ_RANGE_2 | 0xe), /* phyr060 */
 	0x00000000,	// phyr064
 	0x00180008,	// phyr068
 	0x00e00400,	// phyr06c
 	0x00140206,	// phyr070
 	0x1d4c0000,	// phyr074
-	0x493e0107,	// phyr078
+	(0x493e0100 | T_PHY_WRLAT),	/* phyr078 */
 	0x08060404,	// phyr07c
-	0x90000a00,	// phyr080
+	(0x90000000 | T_RDDATA_EN),	/* phyr080 */
 	0x06420618,	// phyr084
 	0x00001002,	// phyr088
 	0x05701016,	// phyr08c
@@ -104,7 +210,7 @@
 	0x20202020,	// phyr09c
 	0x20202020,	// phyr0a0
 	0x00002020,	// phyr0a4
-	0x80000000,	// phyr0a8
+	0x00000000,	/* phyr0a8 */
 	0x00000001,	// phyr0ac
 	0xaeeddeea,	// change address
 	0x1e6e0318,	// new address
@@ -164,7 +270,7 @@
 	0x20202020,	// phyr170
 	0xaeeddeea,	// change address
 	0x1e6e0298,	// new address
-	0x20200800,	// phyr198
+	0x20200000,	/* phyr198 */
 	0x20202020,	// phyr19c
 	0x20202020,	// phyr1a0
 	0x20202020,	// phyr1a4
@@ -187,7 +293,7 @@
 	0x00002020,	// phyr1e8
 	0xaeeddeea,	// change address
 	0x1e6e0304,	// new address
-	0x00000800,	// phyr204
+	(0x00000001 | WR_DATA_EYE_OFFSET), /* phyr204 */
 	0xaeeddeea,	// change address
 	0x1e6e027c,	// new address
 	0x4e400000,	// phyr17c
@@ -213,7 +319,7 @@
 	0x20000000,	// phyr024
 	0x00000008,	// phyr028
 	0x00000000,	// phyr02c
-	(0x00077000 | PHY_ODT),	// phyr030
+	(PHY_RON | PHY_ODT),	/* phyr030 */
 	0x00000000,	// phyr034
 	0x00000000,	// phyr038
 	0x20000000,	// phyr03c
@@ -222,18 +328,18 @@
 	0x00002f07,	// phyr048
 	0x00003080,	// phyr04c
 	0x04000000,	// phyr050
-	0x00000200,	// phyr054
-	(0x03140001 | DRAM_ODT),	// phyr058
-	0x04800000,	// phyr05c
-	0x0800044e,	// phyr060
+	((MR3_VAL << 16) | MR2_VAL),	/* phyr054 */
+	((MR0_VAL << 16) | MR1_VAL),	/* phyr058 */
+	((MR5_VAL << 16) | MR4_VAL),	/* phyr05c */
+	((0x0800 << 16) | MR6_VAL | VREFDQ_RANGE_2 | 0xe), /* phyr060 */
 	0x00000000,	// phyr064
 	0x00180008,	// phyr068
 	0x00e00400,	// phyr06c
 	0x00140206,	// phyr070
 	0x1d4c0000,	// phyr074
-	0x493e0107,	// phyr078
+	(0x493e0100 | T_PHY_WRLAT),	// phyr078
 	0x08060404,	// phyr07c
-	0x90000a00,	// phyr080
+	(0x90000000 | T_RDDATA_EN),	// phyr080
 	0x06420c30,	// phyr084
 	0x00001002,	// phyr088
 	0x05701016,	// phyr08c
@@ -272,7 +378,7 @@
 	0x20202020,	// phyr09c
 	0x20202020,	// phyr0a0
 	0x00002020,	// phyr0a4
-	0x80000000,	// phyr0a8
+	0x00000000,	/* phyr0a8 */
 	0x00000001,	// phyr0ac
 	0xaeeddeea,	// change address
 	0x1e6e0318,	// new address
@@ -332,7 +438,7 @@
 	0x20202020,	// phyr170
 	0xaeeddeea,	// change address
 	0x1e6e0298,	// new address
-	0x20200800,	// phyr198
+	0x20200000,	/* phyr198 */
 	0x20202020,	// phyr19c
 	0x20202020,	// phyr1a0
 	0x20202020,	// phyr1a4
@@ -355,7 +461,7 @@
 	0x00002020,	// phyr1e8
 	0xaeeddeea,	// change address
 	0x1e6e0304,	// new address
-	0x00000800,	// phyr204
+	(0x00000001 | WR_DATA_EYE_OFFSET), /* phyr204 */
 	0xaeeddeea,	// change address
 	0x1e6e027c,	// new address
 	0x4e400000,	// phyr17c
