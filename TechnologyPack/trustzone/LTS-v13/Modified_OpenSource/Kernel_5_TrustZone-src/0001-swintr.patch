--- linux.orig/drivers/irqchip/irq-gic.c	2022-07-08 15:42:59.835461849 +0530
+++ linux/drivers/irqchip/irq-gic.c	2022-07-05 11:21:34.851335048 +0530
@@ -295,7 +295,10 @@
 
 	/* Interrupt configuration for SGIs can't be changed */
 	if (gicirq < 16)
-		return -EINVAL;
+	{
+     	pr_warn("GIC: SGI%d type cannot be modified\n",gicirq);
+		return 0;  //		return -EINVAL;
+	}
 
 	/* SPIs have restrictions on the supported types */
 	if (gicirq >= 32 && type != IRQ_TYPE_LEVEL_HIGH &&
@@ -357,14 +360,14 @@
 		irqstat = readl_relaxed(cpu_base + GIC_CPU_INTACK);
 		irqnr = irqstat & GICC_IAR_INT_ID_MASK;
 
-		if (likely(irqnr > 15 && irqnr < 1020)) {
+		if (likely(irqnr > 7 && irqnr < 1020)) {
 			if (static_branch_likely(&supports_deactivate_key))
 				writel_relaxed(irqstat, cpu_base + GIC_CPU_EOI);
 			isb();
 			handle_domain_irq(gic->domain, irqnr, regs);
 			continue;
 		}
-		if (irqnr < 16) {
+		if (irqnr < 8) {
 			writel_relaxed(irqstat, cpu_base + GIC_CPU_EOI);
 			if (static_branch_likely(&supports_deactivate_key))
 				writel_relaxed(irqstat, cpu_base + GIC_CPU_DEACTIVATE);
@@ -826,6 +829,46 @@
 }
 #endif
 
+int gic_alloc_swintr(unsigned int irq)
+{
+	struct irq_fwspec sgi_fwspec = {
+		.fwnode		= gic_data[0].domain->fwnode,
+		.param_count	= 3,
+		.param			= {2,0,4},		/* SGI X */
+	};
+	int base_sgi=-1;
+
+
+	if ((irq < 8 ) || (irq >15))
+	{
+		pr_err("gic_allo_swintr: Invalid SGI Intr %d \n",irq);
+		return -1;
+	}
+	sgi_fwspec.param[1] = irq;
+
+	base_sgi = __irq_domain_alloc_irqs(gic_data[0].domain, -1, 1,
+					   NUMA_NO_NODE, &sgi_fwspec,
+					   false, NULL);
+	if (base_sgi <= 0)
+	{
+		pr_err("gic_alloc_swintr:  irq_dmain_alloc_irqs() error code %d\n",base_sgi);
+		return -1;
+	}
+
+	return base_sgi;
+}
+EXPORT_SYMBOL(gic_alloc_swintr);
+
+
+void gic_send_swintr(unsigned int cpu_id, unsigned int irq)
+{
+    BUG_ON(cpu_id >= NR_GIC_CPU_IF);
+    cpu_id = 1 << cpu_id;
+    /* this always happens on GIC0 */
+    writel_relaxed((cpu_id << 16) | irq, gic_data_dist_base(&gic_data[0]) + GIC_DIST_SOFTINT);
+}
+EXPORT_SYMBOL(gic_send_swintr);
+
 #ifdef CONFIG_BL_SWITCHER
 /*
  * gic_send_sgi - send a SGI directly to given CPU interface number
@@ -997,15 +1040,19 @@
 		if (fwspec->param_count < 3)
 			return -EINVAL;
 
-		/* Get the interrupt number and add 16 to skip over SGIs */
-		*hwirq = fwspec->param[1] + 16;
-
-		/*
-		 * For SPIs, we need to add 16 more to get the GIC irq
-		 * ID number
-		 */
-		if (!fwspec->param[0])
-			*hwirq += 16;
+		switch (fwspec->param[0]) {
+			case 0:			/* SPI = +31*/
+				*hwirq = fwspec->param[1] + 32;
+				break;
+			case 1:			/* PPI = +16*/
+				*hwirq = fwspec->param[1] + 16;
+				break;
+			case 2:			/* SGI = +0*/
+				*hwirq =fwspec->param[1];
+				break;
+			default:
+				return -EINVAL;
+		}
 
 		*type = fwspec->param[2] & IRQ_TYPE_SENSE_MASK;
 
--- linux.orig/drivers/soc/aspeed/aspeed_swintr.c	1970-01-01 05:30:00.000000000 +0530
+++ linux/drivers/soc/aspeed/aspeed_swintr.c	2022-07-05 11:21:34.851335048 +0530
@@ -0,0 +1,125 @@
+#include <linux/mod_devicetable.h>
+#include <linux/module.h>
+#include <linux/bitops.h>
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/fs.h>
+#include <linux/kfifo.h>
+#include <linux/mfd/syscon.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/poll.h>
+#include <linux/regmap.h>
+#include <linux/of_irq.h>
+
+struct sgi_map
+{
+	int phys;
+	int virt;
+};
+
+
+#define SWINTR_COUNT 8
+static struct sgi_map sgi_irqs[SWINTR_COUNT] = { {8,0},{9,0},{10,0},{11,0},{12,0},{13,0},{14,0},{15,0} };
+
+static irqreturn_t  ast_swintr_irq(int irq, void *arg)
+{
+	printk("aspeed_swintr: Received SGI Virt Irq  %d \n",irq);
+
+	/* Ack/Clear pending intr*/
+
+	return IRQ_HANDLED;
+}
+
+extern int  gic_alloc_swintr(int irq);
+extern void gic_send_swintr(unsigned int cpu_id, unsigned int irq);
+
+
+
+static int  ast_swintr_enable_irq(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	int i;
+
+
+	for (i=0; i<SWINTR_COUNT;i++)
+    {
+		sgi_irqs[i].virt = gic_alloc_swintr(sgi_irqs[i].phys);
+		printk("aspeed_swintr: Map SGI Intr %d -> %d\n",sgi_irqs[i].phys,sgi_irqs[i].virt);
+	}
+
+
+	for (i=0; i<SWINTR_COUNT;i++)
+    {
+  		if (request_percpu_irq(sgi_irqs[i].virt, &ast_swintr_irq, "aspeed_swintr", dev) < 0)
+    	{
+        	printk("aspeed_swintr:  Cannot register IRQ %d (%d)\n", sgi_irqs[i].phys,sgi_irqs[i].virt);
+        	return -EIO;
+    	}
+    	enable_percpu_irq(sgi_irqs[i].virt, 0);
+		printk("aspeed_swintr: Enabled SGI Intr %d (%d)\n",sgi_irqs[i].phys,sgi_irqs[i].virt);
+	}
+
+#if 0
+    for (i=0; i<SWINTR_COUNT;i++)
+    {
+		printk("aspeed_swintr: Raising  SGI Intr %d (%d)\n",sgi_irqs[i].phys,sgi_irqs[i].virt);
+        gic_send_swintr(0,sgi_irqs[i].phys);
+    }
+#endif
+
+	return 0;
+}
+
+
+
+static int  ast_swintr_disable_irq(struct platform_device *pdev)
+{
+    struct device *dev = &pdev->dev;
+    int i;
+
+    for (i=0; i<SWINTR_COUNT;i++)
+    {
+       	disable_percpu_irq(sgi_irqs[i].virt);
+        free_percpu_irq(sgi_irqs[i].virt, dev);
+		printk("aspeed_swintr: Disabled SGI Intr %d (%d)\n",sgi_irqs[i].phys,sgi_irqs[i].virt);
+
+    }
+    return 0;
+}
+
+
+static int ast_swintr_probe(struct platform_device *pdev)
+{
+	return ast_swintr_enable_irq(pdev);
+}
+
+static int ast_swintr_remove(struct platform_device *pdev)
+{
+	return ast_swintr_disable_irq(pdev);
+}
+
+
+static const struct of_device_id ast_swintr_match[] = 
+{
+	{ .compatible = "ast,ast_swintr" },
+	{},
+};
+
+static struct platform_driver ast_swintr_driver = {
+	.driver = {
+		.name   = KBUILD_MODNAME,
+		.of_match_table = ast_swintr_match,
+	},
+	.probe = ast_swintr_probe,
+	.remove= ast_swintr_remove,
+};
+
+module_platform_driver(ast_swintr_driver);
+MODULE_DEVICE_TABLE(of, ast_swintr_match);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("AMI");
+MODULE_DESCRIPTION("Test driver to receive Non-secure Sw Intr");
--- linux.orig/drivers/soc/aspeed/Kconfig	2022-07-08 15:43:00.535442581 +0530
+++ linux/drivers/soc/aspeed/Kconfig	2022-07-05 11:21:34.851335048 +0530
@@ -97,4 +97,9 @@
 	  Control Aspeed UART routing via sysfs. This enables UART
 	  and I/O components to be dynamically connected at runtime.
 
+config ASPEED_SWINTR
+        tristate "ASPEED register SGI 8-15"
+        help
+         Register ASPEED ARM SGI interrupts 8-15
+
 endmenu

diff -Naur linux_old/drivers/soc/aspeed/Makefile linux/drivers/soc/aspeed/Makefile
--- linux_old/drivers/soc/aspeed/Makefile	2022-09-02 12:26:56.991880082 +0530
+++ linux/drivers/soc/aspeed/Makefile	2022-09-02 12:27:56.777937524 +0530
@@ -14,3 +14,4 @@
 obj-$(CONFIG_ASPEED_OTP)	+= aspeed-otp.o
 obj-$(CONFIG_SOC_ASPEED)       += aspeed-usb-phy.o
 obj-$(CONFIG_SOC_ASPEED)       += aspeed-usb-ahp.o
+obj-$(CONFIG_ASPEED_SWINTR)    += aspeed_swintr.o
