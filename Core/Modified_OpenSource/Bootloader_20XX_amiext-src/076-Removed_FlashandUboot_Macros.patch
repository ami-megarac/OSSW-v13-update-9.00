diff -Naur uboot_old/include/oem/ami/fmh/fmh.h uboot_new/include/oem/ami/fmh/fmh.h
--- uboot_old/include/oem/ami/fmh/fmh.h	2023-12-04 15:54:09.022651555 +0530
+++ uboot_new/include/oem/ami/fmh/fmh.h	2023-12-04 15:48:25.230288239 +0530
@@ -15,6 +15,8 @@
 #define FMH_MAJOR				1
 #define FMH_MINOR		 		8
 
+#define MAX_FLASH_SIZE 16 // Base value of simple_strtoull(), which will convert a string to an unsigned long long.
+
 /*
 typedef struct
 {
@@ -139,7 +141,10 @@
 /* Function Prototypes */
 FMH* 	ScanforFMH(struct spi_flash *flash,u32 SectorAddr, UINT32 SectorSize);
 void	CreateFMH(FMH *fmh,UINT32 AllocatedSize, MODULE_INFO *mod);
-void 	CreateAlternateFMH(ALT_FMH *altfmh,UINT32 FMH_Offset); 
+void 	CreateAlternateFMH(ALT_FMH *altfmh,UINT32 FMH_Offset);
+extern int get_flash_macro(char *property,char *value);
+extern int get_uboot_macro(char *property,char *value);
+extern int get_conf_macro(char *property,char *value);
 // #ifdef CONFIG_SPX_FEATURE_BMC_FIRMWARE_AUTO_RECOVERY
 FMH* 	ScanforFMH_RAM(unsigned char *SectorAddr, unsigned long SectorSize);
 // #endif
diff -Naur uboot_old/oem/ami/fdt/cmdfdt.c uboot_new/oem/ami/fdt/cmdfdt.c
--- uboot_old/oem/ami/fdt/cmdfdt.c	1970-01-01 05:30:00.000000000 +0530
+++ uboot_new/oem/ami/fdt/cmdfdt.c	2023-12-04 15:48:27.742273923 +0530
@@ -0,0 +1,147 @@
+#include <common.h>
+#include <command.h>
+#include <linux/ctype.h>
+#include <linux/types.h>
+#include <asm/global_data.h>
+#include <linux/libfdt.h>
+#include <fdt_support.h>
+# include <oem/ami/fmh/fmh.h>
+#include <mapmem.h>
+#include <asm/io.h>
+
+int load_fdt(void);
+struct fdt_header *gblob;
+//struct fdt_header *working_fdt; 
+static int fdt_valid(struct fdt_header **blobp)
+{
+	const void *blob = *blobp;
+	int err;
+
+	if (blob == NULL) {
+		printf ("The address of the fdt is invalid (NULL).\n");
+		return 0;
+	}
+
+	err = fdt_check_header(blob);
+	if (err == 0)
+		return 1;	// valid 
+	if (err < 0) {
+		printf("libfdt fdt_check_header(): %s \n", fdt_strerror(err));
+		return 0;
+		}
+	return 1;
+}
+
+int load_fdt(void)
+{
+	unsigned  long addr=0;
+	struct fdt_header *blob;
+	char *env_fdt_addr = NULL;
+	env_fdt_addr = env_get("fdtcontroladdr");
+	if(env_fdt_addr == NULL)
+	{
+		printf("unable to find fdtcontroladdr ");
+		return -1;
+	}
+	addr = simple_strtoul(env_fdt_addr, NULL, 16);
+	//printf("\n fdt control address 0x%lx\n",addr);
+	blob = map_sysmem(addr, 0);
+		if (!fdt_valid(&blob))
+		{
+			printf("\n Invalid blob \n");
+			return 1;
+		}
+	set_working_fdt_addr(addr);
+	return 0;
+		
+}
+
+int get_flash_macro(char *property,char *value)
+{
+	if (CONFIG_IS_ENABLED(CMD_FDT))
+      {
+	int  nodeoffset;	/* node offset from libfdt */
+	int  len = 0;		/* new length of the property */
+	const void *nodep;	/* property node pointer */
+	if(load_fdt() == 0)
+	{
+		nodeoffset = fdt_path_offset(working_fdt, "/ami_macros/flash_macros");
+		if (nodeoffset < 0) {
+			/*
+			 * Not found or something else bad happened.
+			 */
+			printf(" get_flash_macro libfdt fdt_path_offset() returned %s\n",
+				fdt_strerror(nodeoffset));
+			return -1;
+		}
+		
+		nodep = fdt_getprop(
+				working_fdt, nodeoffset, property, &len);
+			if (len == 0) {
+				/* no property value */
+				return -1;
+			}
+		sprintf(value, "%08X", fdt32_to_cpu(*(fdt32_t *)nodep));
+		//printf("\nThe property %s  value is %s\n",property,value);
+		return 0;
+	}
+      }
+	return -1;
+}
+int get_uboot_macro(char *property,char *value)
+{
+	int  nodeoffset;	/* node offset from libfdt */
+	int  len = 0;		/* new length of the property */
+	const void *nodep;	/* property node pointer */
+	if(load_fdt() == 0)
+	{
+		nodeoffset = fdt_path_offset(working_fdt, "/ami_macros/uboot-macros");
+		if (nodeoffset < 0) {
+			/*
+			 * Not found or something else bad happened.
+			 */
+			printf(" get_uboot_macro libfdt fdt_path_offset() returned %s\n",
+				fdt_strerror(nodeoffset));
+			return -1;
+		}
+		nodep = fdt_getprop(
+				working_fdt, nodeoffset, property, &len);
+			if (len == 0) {
+				/* no property value */
+				return -1;
+			}
+		snprintf(value,len, "%s",(char*)nodep);
+		return 0;
+	}
+	return -1;
+	
+}
+
+int get_conf_macro(char *property,char *value)
+{
+	int  nodeoffset;	/* node offset from libfdt */
+	int  len = 0;		/* new length of the property */
+	const void *nodep;	/* property node pointer */
+	if(load_fdt() == 0)
+	{
+		nodeoffset = fdt_path_offset(working_fdt, "/ami_macros/conf_macros");
+		if (nodeoffset < 0) {
+			/*
+			 * Not found or something else bad happened.
+			 */
+			printf("get_conf_macro libfdt fdt_path_offset() returned %s\n",
+				fdt_strerror(nodeoffset));
+			return -1;
+		}
+		nodep = fdt_getprop(
+				working_fdt, nodeoffset, property, &len);
+			if (len == 0) {
+				/* no property value */
+				return -1;
+			}
+		snprintf(value,len, "%s",(char*)nodep);
+		return 0;
+	}
+	return -1;
+}
+//int get_all_uboot_macros(
diff -Naur uboot_old/oem/ami/fdt/Makefile uboot_new/oem/ami/fdt/Makefile
--- uboot_old/oem/ami/fdt/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ uboot_new/oem/ami/fdt/Makefile	2023-12-04 15:48:27.742273923 +0530
@@ -0,0 +1,21 @@
+# (C) Copyright 2013 
+# American Megatrends Inc
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+
+obj-y	+= cmdfdt.o
diff -Naur uboot_old/oem/ami/fmh/cmd_fmh.c uboot_new/oem/ami/fmh/cmd_fmh.c
--- uboot_old/oem/ami/fmh/cmd_fmh.c	2023-12-04 15:54:09.094650242 +0530
+++ uboot_new/oem/ami/fmh/cmd_fmh.c	2023-12-04 15:48:27.906272988 +0530
@@ -70,8 +70,8 @@
 }VersionInfo;
 
 #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-        #define CE1_ADDRESS_SEGMENT 0x28000000
-        struct spi_flash *flashspi[CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS]={NULL};
+        #define CE1_ADDRESS_SEGMENT 0x28000000 
+	struct spi_flash *flashspi=NULL;
 #endif
 #ifdef CONFIG_SPX_FEATURE_SINGLE_SPI_ABR
 	#define CE0_START_ADDRESS 0x20000000
@@ -263,7 +263,25 @@
 {
     //unsigned char buf[64*1024] = {0};
 #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-    struct spi_flash *flash[CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS]= {NULL};
+    char gb_flash_banks[MAX_FLASH_SIZE];
+    memset(gb_flash_banks,0,sizeof(gb_flash_banks));
+    int gb_flash_banks_long = 0;
+    if(get_flash_macro("global-flash-banks",gb_flash_banks) == 0)
+    {
+            gb_flash_banks_long = simple_strtoull(gb_flash_banks, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+           printf(" read fail from get_flash_macro \n"); 
+	   return -ENODEV;
+    }
+	struct spi_flash *flash=NULL;
+        flash = kzalloc(gb_flash_banks_long * sizeof(struct spi_flash), GFP_KERNEL);
+        if (!flash){
+                printk("flash alloc fail \n");
+                return -ENOMEM;
+        }
+
 #else
     struct spi_flash *flash=NULL;
 #endif
@@ -286,17 +304,17 @@
 
 #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
     int cs=0;
-    for(cs=0; cs < CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS ; cs++)
+    for(cs=0; cs < gb_flash_banks_long ; cs++)
     {
-        flash[cs] = spi_flash_probe(CONFIG_ENV_SPI_BUS, cs,
+        flash[cs] = *spi_flash_probe(CONFIG_ENV_SPI_BUS, cs,
                             CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
-        if (flash[cs] == NULL)
+	if (&flash[cs] == NULL)
         {
             printf("\nspi_flash_probe failed on cs = %d\n",cs);
             continue;
         }
 
-        flashsize = flash[cs]->size;
+	flashsize = flash[cs].size;
         SectorSize = 0x10000; //flash->erase_size;//0x10000;//flash->sector_size;
         SectorCount = flashsize/SectorSize;
         printf("chip %d Flash size 0x%lx Sector size 0x%lx SectorCount 0x%lx\n",cs,flashsize,SectorSize,SectorCount);
@@ -312,7 +330,7 @@
             }
             #endif
 
-            fmh = ScanforFMH(flash[cs],((i*SectorSize)),SectorSize);
+	    fmh = ScanforFMH(&flash[cs],((i*SectorSize)),SectorSize); 
             if (fmh == NULL)
             {
                 i++;
@@ -603,12 +621,22 @@
 {
 	//flash_info_t *flinfo;
                 struct spi_flash *flash;
-        unsigned long SectorSize=CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+        unsigned long SectorSize=0;
         unsigned long SectorCount=0,flashsize=0;
         long SkipSize;
         int i;
         FMH     *fmh;
         MODULE_INFO *mod;
+	unsigned long gb_used_flash_size_long=0;
+	char gb_used_flash_size[MAX_FLASH_SIZE];
+	char erase_blaock_size[MAX_FLASH_SIZE];
+	memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+        memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+
+	if(0)
+        {
+                gb_used_flash_size_long=gb_used_flash_size_long;
+        }
 
         if ((NULL == Name) || (NULL == Location) || (NULL == Size))
         {
@@ -630,6 +658,24 @@
         	puts("\nspi_flash_probe failed");
         	hang();
     	}
+	if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+        {
+                SectorSize=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+	if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+        {
+                gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
 	flashsize = flash->size;
                 SectorSize = 0x10000;
         SectorCount = flashsize/SectorSize;
@@ -637,10 +683,10 @@
         {
                 #ifdef CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT
 		#ifndef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-                if( (i*SectorSize) >= (2 * CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE) ) { break; }
+                if( (i*SectorSize) >= (2 * gb_used_flash_size_long) ) { break; }
 		#endif
                 #else
-                if( (i*SectorSize) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE ) { break; }
+                if( (i*SectorSize) >= gb_used_flash_size_long ) { break; }
                 #endif
 
                 //fmh = ScanforFMH((unsigned char *)(CONFIG_SYS_FLASH_BASE+(i*SectorSize)),SectorSize);
@@ -890,16 +936,60 @@
 {
 
 //	flash_info_t *flinfo;
-	unsigned long i=0,SectorSize=CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+	unsigned long i=0,SectorSize=0;
 	unsigned long SectorCount=0,flashsize=0;
 	unsigned long watchdog_reset_status = 0;
 	u8 imgIndex=0,img1_presence=0,img2_presence=0;
 	FMH	*fmh = NULL;
 	MODULE_INFO *mod = NULL;
 	struct spi_flash *flash;
+	int gb_flash_banks_long = 0;
+	unsigned long gb_used_flash_size_long = 0;
+	char erase_blaock_size[MAX_FLASH_SIZE];
+        char gb_flash_banks[MAX_FLASH_SIZE];
+	char gb_used_flash_size[MAX_FLASH_SIZE];
+        memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+        memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+        memset(gb_flash_banks,0,sizeof(gb_flash_banks));
+	if(0)
+        {
+                gb_used_flash_size_long=gb_used_flash_size_long;
+        }
+	if(0)
+        {
+                gb_flash_banks_long=gb_flash_banks_long;
+        }
+        if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+        {
+                SectorSize=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+
+        if(get_flash_macro("global-flash-banks",gb_flash_banks) == 0)
+        {
+                gb_flash_banks_long = simple_strtoull(gb_flash_banks, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+        if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+        {
+                gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
 
 #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-        VersionInfo firmware_ver[CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS], platform_ver[CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS];
+        VersionInfo firmware_ver[gb_flash_banks_long], platform_ver[gb_flash_banks_long];
 #else
         VersionInfo firmware_ver[2], platform_ver[2];
 #endif
@@ -915,12 +1005,18 @@
 #endif
 
 #if defined CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-    int cs=0;
-    for(cs=0; cs<CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS ; cs++)
+        int cs=0;
+        flashspi = kzalloc(gb_flash_banks_long * sizeof(struct spi_flash), GFP_KERNEL);
+        if (!flashspi){
+                printk("flashspi alloc fail \n");
+                return -ENOMEM;
+        }
+
+    for(cs=0; cs<gb_flash_banks_long ; cs++)
     {
-        flashspi[cs]= spi_flash_probe(CONFIG_ENV_SPI_BUS, cs,
+        flashspi[cs]= *spi_flash_probe(CONFIG_ENV_SPI_BUS, cs,
                       CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
-        if (flashspi[cs] == NULL)
+        if (&flashspi[cs] == NULL)
         {
             printf("\nspi_flash_probe failed for cS=%d\n",cs);
             continue;
@@ -951,12 +1047,11 @@
 
 
 	flashsize = 2*(flash->size);
-	SectorSize = 0x10000;
 	SectorCount = flashsize/SectorSize;
         memset(&platform_ver,0,sizeof(platform_ver));
  
         #if defined (CONFIG_SPX_FEATURE_SW_FAILSAFE_BOOT)  && defined(CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK)
-        for(cs=0; cs<CONFIG_SPX_FEATURE_GLOBAL_FLASH_BANKS ; cs++)
+        for(cs=0; cs< gb_flash_banks_long ; cs++)
 	{	
 	       if (cs>0)
 	       {
@@ -968,18 +1063,19 @@
 		{
 			#ifdef CONFIG_SPX_FEATURE_GLOBAL_DUAL_IMAGE_SUPPORT
 			#ifndef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-				if( (i*SectorSize) >= (2 * CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE) ) { break; }
-				if( ((i*SectorSize) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE) && (imgIndex == 0) ) {
+				if( (i*SectorSize) >= (2 * gb_used_flash_size_long) ) { break; }
+				if( ((i*SectorSize) >= gb_used_flash_size_long) && (imgIndex == 0) ) {
 					imgIndex++; 
 				}
 				
 			#endif
 			#else
-				if( (i*SectorSize) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE ) { break; }
+				if( (i*SectorSize) >= gb_used_flash_size_long ) { break; }
 			#endif
 			/* Check if FMH found at this sector */
                         #ifdef CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK
-			fmh = ScanforFMH(flashspi[cs],(i*SectorSize),SectorSize);
+			printf(" ####### Before ScanforFMH(&flashspi[cs], \n");
+			fmh = ScanforFMH(&flashspi[cs],(i*SectorSize),SectorSize);
                         #else
 			fmh = ScanforFMH(flash,(i*SectorSize),SectorSize);
                         #endif
@@ -1234,6 +1330,26 @@
 	char Command[128] = "bootm";
 	char AddrStr[128] = "0xFFFFFFFF";
 	char dtbname[128]={0};
+
+#if defined (CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK)
+        char gb_flash_banks[MAX_FLASH_SIZE];
+        memset(gb_flash_banks,0,sizeof(gb_flash_banks));
+        int gb_flash_banks_long = 0;
+        if(get_flash_macro("global-flash-banks",gb_flash_banks) == 0)
+        {
+                gb_flash_banks_long = simple_strtoull(gb_flash_banks, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+                return -ENODEV;
+        }
+        flashspi = kzalloc(gb_flash_banks_long * sizeof(struct spi_flash), GFP_KERNEL);
+        if (!flashspi){
+                printk("flashspi alloc fail \n");
+                return -ENOMEM;
+        }
+#endif
 #if defined(CONFIG_SPX_FEATURE_MMC_BOOT) || defined(CONFIG_SPX_FEATURE_HW_EMMC_BOOT)  
 	//char AddrStr2[128] = "0xFFFFFFFF";
 #endif
@@ -1267,12 +1383,23 @@
 	FMH	*fmh = NULL;
 	unsigned char mod_Name[9]={0};
 	MODULE_INFO *mod = NULL;
-	unsigned long i=0,SectorSize=CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;//,flashsize=0;
+	unsigned long i=0,SectorSize=0;//,flashsize=0;
 	unsigned long SectorCount,StartingSector =0, startaddress;	
 	long SkipSize;
 	unsigned short Compression;
 	int MtdPartition = 1;		/* mtdblock0 is used for full flash */
 	int ret = 0;
+	char erase_blaock_size[MAX_FLASH_SIZE];
+        memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+        if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+        {
+                SectorSize=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+                return -ENODEV;
+        }
 #endif
 	unsigned long initrd_address = 0xFFFFFFFF;
 	unsigned long ExecuteAddr = 0xFFFFFFFF;
@@ -1306,6 +1433,22 @@
 	char *bootselect = NULL;
 #endif
 #endif
+	unsigned long gb_used_flash_size_ln=0;
+	if(0)
+	{
+		gb_used_flash_size_ln=gb_used_flash_size_ln;
+	}
+	char gb_used_flash_size[MAX_FLASH_SIZE];
+        memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+        if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+        {
+                gb_used_flash_size_ln=simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
 
 	sprintf(baudrate_str,"%d",CONFIG_BAUDRATE);
 
@@ -1383,8 +1526,8 @@
     if(imagetoboot == IMAGE_1)
     {
 #if defined (CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK)
-        flash = flashspi[0];
-        SectorCount = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/SectorSize);
+        flash = &flashspi[0]; 
+        SectorCount = (gb_used_flash_size_ln/SectorSize);
         StartingSector = 0;
         startaddress=0;
 #elif defined (CONFIG_SPX_FEATURE_SINGLE_SPI_ABR)
@@ -1392,7 +1535,7 @@
 	StartingSector = 0;
 	startaddress=0;
 #else
-        SectorCount = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/SectorSize);
+        SectorCount = (gb_used_flash_size_ln/SectorSize);
         StartingSector = 0;
         startaddress=0;
 #endif
@@ -1401,7 +1544,7 @@
     else//for image2
     {
 #if defined (CONFIG_SPX_FEATURE_DEDICATED_SPI_FLASH_BANK)
-	flash = flashspi[1];
+	flash = &flashspi[1]; 
 	StartingSector = flash->size;
 	SectorCount=StartingSector+flash->size;
 	startaddress=CE1_ADDRESS_SEGMENT;
@@ -1413,10 +1556,10 @@
 	startaddress=CE0_START_ADDRESS+(flash->size/2);
 #else
 
-        StartingSector = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/SectorSize);
-        SectorCount = ( (2*CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)/SectorSize );
+        StartingSector = (gb_used_flash_size_ln/SectorSize);
+        SectorCount = ( (2*gb_used_flash_size_ln)/SectorSize );
         //startaddress=CONFIG_SYS_FLASH_BASE+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
-        startaddress=CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
+        startaddress=gb_used_flash_size_ln;
 #endif
     }
 
diff -Naur uboot_old/oem/ami/fmh/fmhcore.c uboot_new/oem/ami/fmh/fmhcore.c
--- uboot_old/oem/ami/fmh/fmhcore.c	2023-12-04 15:54:09.094650242 +0530
+++ uboot_new/oem/ami/fmh/fmhcore.c	2023-12-04 15:48:27.866273216 +0530
@@ -237,10 +237,22 @@
         }
 	else
 #elif defined CONFIG_SPX_FEATURE_CONTIGIOUS_SPI_MEMORY
+	unsigned long gb_used_flash_size_long=0;
+        char gb_used_flash_size[MAX_FLASH_SIZE];
+        memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+        if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+        {
+                gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+               printf(" read fail from get_flash_macro \n"); 
+	       return NULL;
+        }
 	mod = &(fmh->Module_Info);
-        if ((StartAddr - le32_to_host(mod->Module_Location)) >= CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE)
+        if ((StartAddr - le32_to_host(mod->Module_Location)) >= gb_used_flash_size_long)
         {
-                ret=spi_flash_read(flash,le32_to_host(mod->Module_Location)+CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE+FMH_Offset, sizeof(FMH), (void *)&fmh_buffer);
+                ret=spi_flash_read(flash,le32_to_host(mod->Module_Location)+gb_used_flash_size_long+FMH_Offset, sizeof(FMH), (void *)&fmh_buffer);
                 if(ret)
                 {
                         puts("Error in reading SPI\n");
diff -Naur uboot_old/oem/ami/fmh/hrotcore.c uboot_new/oem/ami/fmh/hrotcore.c
--- uboot_old/oem/ami/fmh/hrotcore.c	2023-12-04 15:54:09.094650242 +0530
+++ uboot_new/oem/ami/fmh/hrotcore.c	2023-12-04 16:14:29.032459994 +0530
@@ -103,7 +103,7 @@
 	if (fmh != NULL)
     {
     	mod = &(fmh->Module_Info);
-    	printf("\nFMH Located at 0x%08lx of Size 0x%08x\r\n",(unsigned long)((CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE-SectorSize)),le32_to_host(fmh->FMH_AllocatedSize));        
+	printf("\nFMH Located at 0x%08lx of Size 0x%08x\r\n",(unsigned long)((CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE-SectorSize)),le32_to_host(fmh->FMH_AllocatedSize));	
         strncpy((char *)Name,(char *)mod->Module_Name,8);
         Name[8]=0;
         printf("Name    : %s\r\n",Name);
diff -Naur uboot_old/oem/ami/fwupdate/fwupdate.c uboot_new/oem/ami/fwupdate/fwupdate.c
--- uboot_old/oem/ami/fwupdate/fwupdate.c	2023-12-04 15:54:09.098650169 +0530
+++ uboot_new/oem/ami/fwupdate/fwupdate.c	2023-12-04 15:48:27.926272874 +0530
@@ -37,11 +37,11 @@
 #include <mmc.h>
 #include <part.h>
 #ifdef CONFIG_SPX_FEATURE_BMC_FIRMWARE_AUTO_RECOVERY
-# include <oem/ami/fmh/fmh.h>
 # include "fat.h"
 #include <ext4fs.h>
 #include <mmc.h>
 #endif
+# include <oem/ami/fmh/fmh.h>
 #include <environment.h>
 #include <configs/evb_ast2600.h>
 #include <spi_flash.h>
@@ -279,12 +279,37 @@
     unsigned char   *TempBuf = (unsigned char *)YAFU_TEMP_SECTOR_BUFFER;
     int i,ret = -1;
 
-    for(i = 0; i < (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE); i++)
+    char erase_blaock_size[MAX_FLASH_SIZE];
+    char gb_used_flash_size[MAX_FLASH_SIZE];
+    unsigned long gb_used_flash_size_long=0;
+    unsigned long gb_erase_block_size_long=0;
+    memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+    memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+    if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+    {
+	    gb_erase_block_size_long = simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
     {
-        memcpy(TempBuf, (unsigned char *)(YAFU_IMAGE_UPLOAD_LOCATION + (i * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE)),CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+        printf(" read fail from get_flash_macro \n");
+	return -ENODEV;
+    }
+    if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+    {
+	    gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+	    printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
+
+    for(i = 0; i < (gb_used_flash_size_long/gb_erase_block_size_long); i++)
+    {
+       memcpy(TempBuf, (unsigned char *)(YAFU_IMAGE_UPLOAD_LOCATION + (i * gb_erase_block_size_long)),gb_erase_block_size_long);
 
         /*Locate the FMH Section*/
-        pFMH = ScanforFMH_RAM(TempBuf,CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+        pFMH = ScanforFMH_RAM(TempBuf,gb_erase_block_size_long);
         if(pFMH != NULL)
         {
             /*Get the Module Information*/
@@ -305,7 +330,7 @@
                 *ConfSize = pFMH->FMH_AllocatedSize;
             }
         }
-        offset += CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+        offset += gb_erase_block_size_long;
         
     }
 
@@ -321,7 +346,23 @@
     unsigned char   *TempBuf = (unsigned char*)YAFU_TEMP_SECTOR_BUFFER;
  
     unsigned char   *pRamAddr;
-    unsigned long   cnt,confstartaddr = 0,confsize = 0, offset=0;   
+    unsigned long   cnt,confstartaddr = 0,confsize = 0, offset=0;
+
+    unsigned long gb_used_flash_size_long=0;
+    unsigned long gb_flash_start_long=0;
+    unsigned long gb_erase_block_size_long=0;
+    unsigned long gb_uboot_env_start_long=0;
+    unsigned long gb_uboot_env_size_long=0;
+    char erase_blaock_size[MAX_FLASH_SIZE];
+    char gb_used_flash_size[MAX_FLASH_SIZE];
+    char gb_uboot_env_start[MAX_FLASH_SIZE];
+    char gb_uboot_env_size[MAX_FLASH_SIZE];
+    char gb_flash_start[MAX_FLASH_SIZE];
+    memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+    memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+    memset(gb_uboot_env_start,0,sizeof(gb_uboot_env_start));
+    memset(gb_uboot_env_size,0,sizeof(gb_uboot_env_size));
+    memset(gb_flash_start,0,sizeof(gb_flash_start));  
 
     /*Validate the Recovery Image which is in RAM Memory*/
     if(VerifyRAMImage(&confstartaddr,&confsize) != 0)
@@ -329,6 +370,51 @@
         printf("Image in the RAM address is invalid !!!");
         return -1;
     }
+    if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+    {
+            gb_erase_block_size_long=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
+    if(get_flash_macro("global-flash-start",gb_flash_start) == 0)
+    {
+            gb_flash_start_long=simple_strtoull(gb_flash_start, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
+    if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+    {
+            gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
+    if(get_uboot_macro("global-uboot-env-start",gb_uboot_env_start) == 0)
+    {
+            gb_uboot_env_start_long = simple_strtoull(gb_uboot_env_start, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_uboot_macro \n");
+	    return -ENODEV;
+    }
+    if(get_uboot_macro("global-uboot-env-size",gb_uboot_env_size) == 0)
+    {
+            gb_uboot_env_size_long = simple_strtoull(gb_uboot_env_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_uboot_macro \n");
+	    return -ENODEV;
+    }
 
 	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
                         CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
@@ -337,17 +423,17 @@
         puts("\nspi_flash_probe failed");
         hang();
     }
-	TotalSectorCnt = (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+	TotalSectorCnt = (gb_used_flash_size_long/gb_erase_block_size_long);
 
     for(sector = 0; sector < TotalSectorCnt; sector++)
     {
 
-        pRamAddr = (unsigned char *) (YAFU_IMAGE_UPLOAD_LOCATION + (sector * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE));
-		offset = sector * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+        pRamAddr = (unsigned char *) (YAFU_IMAGE_UPLOAD_LOCATION + (sector * gb_erase_block_size_long));
+		offset = sector * gb_erase_block_size_long;
 
  /*Skip the U-Boot Env Sector*/
-        if((offset >= ((CONFIG_SPX_FEATURE_GLOBAL_UBOOT_ENV_START - CONFIG_SPX_FEATURE_GLOBAL_FLASH_START))) &&
-            (offset < ((CONFIG_SPX_FEATURE_GLOBAL_UBOOT_ENV_START - CONFIG_SPX_FEATURE_GLOBAL_FLASH_START + CONFIG_SPX_FEATURE_GLOBAL_UBOOT_ENV_SIZE))))
+        if((offset >= ((gb_uboot_env_start_long - gb_flash_start_long))) &&
+			(offset < ((gb_uboot_env_start_long - gb_flash_start_long + gb_uboot_env_size_long))))
         {
            // printf("Skipping U-Boot Environment sector: %d\n",sector);
 			printf("evn sector =%lx\n",offset);
@@ -359,7 +445,7 @@
         while(retries)
         {
             
-			if(0 != spi_flash_read(flash, offset, CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE,(char*)TempBuf))
+			if(0 != spi_flash_read(flash, offset, gb_erase_block_size_long,(char*)TempBuf))
 			{
                 retries--;
                 continue;
@@ -371,7 +457,7 @@
             return -1;
 
         /*Skip the sector if there is no change*/
-        if(0 == memcmp((unsigned char*)TempBuf,(unsigned char*)pRamAddr,CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE))
+        if(0 == memcmp((unsigned char*)TempBuf,(unsigned char*)pRamAddr,gb_erase_block_size_long))
         {
             printf("sector %d did not change offset=%lx\n",sector,offset);
             continue;
@@ -381,7 +467,7 @@
         while(retries)
         {
             /*Erase the sector*/
-            if(0 != spi_flash_erase(flash, offset, CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE))
+            if(0 != spi_flash_erase(flash, offset, gb_erase_block_size_long))
             {
                 retries--;
                 continue;
@@ -392,7 +478,7 @@
         if(retries == 0)
             return -1;
 
-        cnt = CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+        cnt = gb_erase_block_size_long;
         retries = 3;
         while(retries)
         {
@@ -402,7 +488,7 @@
             {
 				printf("failed to flash hence erasing sector =%lx\n",offset);
                 retries--;
-                spi_flash_erase(flash, offset, CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+                spi_flash_erase(flash, offset, gb_erase_block_size_long);
                 continue;
             }
             break;
@@ -658,6 +744,12 @@
 	unsigned long 	BaseFlashAddrs = 0;
 	struct spi_flash *flash;	
 
+	unsigned long gb_used_flash_size_long=0;
+        unsigned long gb_erase_block_size_long=0;
+        unsigned long gb_flash_size_long=0;
+        char erase_blaock_size[MAX_FLASH_SIZE];
+        char gb_used_flash_size[MAX_FLASH_SIZE];
+        char gb_flash_size[MAX_FLASH_SIZE];
 	pKCSRes  = (KCSCmd_T*)(&m_KCSRes[0]);
 	pKCSCmd  = (KCSCmd_T*)(&m_KCSCmd[0]);
 	pIPMICmd = (IPMICmdData_T *)(&m_IPMICmd);
@@ -666,6 +758,38 @@
 	InitKCS ();
 	printf ("done\n");
 	gUbootTimeout = UBOOT_TIMEOUT_VALUE;
+	memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+        memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+	memset(gb_flash_size,0,sizeof(gb_flash_size));
+
+	if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+        {
+                gb_erase_block_size_long=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+
+        }
+        if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+        {
+                gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+        if(get_flash_macro("global-flash-size",gb_flash_size) == 0)
+        {
+                gb_flash_size_long = simple_strtoull(gb_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
 	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
                         CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
     if (flash == NULL) 
@@ -699,14 +823,14 @@
 		{
 
 		if (gFWUploadSelector == IMAGE_2)
-			BaseFlashAddrs =  CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
+			BaseFlashAddrs =  gb_used_flash_size_long;
 		BlkToUpgrade = gEraseBlock;
 
 		pRamAddress =(unsigned char *)YAFU_IMAGE_UPLOAD_LOCATION;
 									   
-		if((BlkToUpgrade /CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE) < (CONFIG_SPX_FEATURE_GLOBAL_FLASH_SIZE/CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE) )
+		if((BlkToUpgrade /gb_erase_block_size_long) < (gb_flash_size_long/gb_erase_block_size_long) )
 		{
-			sector_number = ( (BaseFlashAddrs + BlkToUpgrade) /CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);	
+			sector_number = ( (BaseFlashAddrs + BlkToUpgrade) /gb_erase_block_size_long);
 			
 			/* SectorToUpdate value starts from 0 to all available sector in current bank.Once bank changes,SectorToUpdate will start again from 0.*/
 			SectorToUpdate = sector_number - prev_sector;
@@ -717,23 +841,23 @@
 				prev_sector = sector_number;//This assignment will only take place,when there is bank change.
 			}*/
 
-			SectorToUpdate = SectorToUpdate % (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE  / CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
-			if(0 != spi_flash_read(flash,(SectorToUpdate * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE ), CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE, (char *)TempBuf))
+			SectorToUpdate = SectorToUpdate % (gb_used_flash_size_long  / gb_erase_block_size_long);
+			if(0 != spi_flash_read(flash,(SectorToUpdate * gb_erase_block_size_long ), gb_erase_block_size_long, (char *)TempBuf))
 			{
                 retries--;
                 continue;
             }
 		
-			if (0 == memcmp ((unsigned char*)TempBuf, pRamAddress, CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE))	
+			if (0 == memcmp ((unsigned char*)TempBuf, pRamAddress, gb_erase_block_size_long))
 			{
-			 	printf ("sector %d did not change\n", (SectorToUpdate * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE ));
+			 	printf ("sector %ld did not change\n", (SectorToUpdate * gb_erase_block_size_long ));
 				gStartFirmwareUpdation = 0;	 
 				continue;
 			}	
 			retries = 3;
 			while (retries)
 			{
-				if (0 != spi_flash_erase (flash, (SectorToUpdate * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE ), CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE))
+				if (0 != spi_flash_erase (flash, (SectorToUpdate * gb_erase_block_size_long ), gb_erase_block_size_long))
 				{
 					printf ("Flash Erase Failed at sector %d and retrying...\n", SectorToUpdate);
 					retries--;
@@ -747,8 +871,8 @@
 			}
 							
 			src   = pRamAddress;
-			addr = (SectorToUpdate * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE );
-			cnt  = CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+			addr = (SectorToUpdate * gb_erase_block_size_long );
+			cnt  = gb_erase_block_size_long;
 			retries = 3;
 
 			while (retries)
@@ -757,7 +881,7 @@
 				{
 					printf ("\nFlash write failed at address =0x%lx of size= 0x%lx\n", addr, cnt);
 					retries--;
-					spi_flash_erase (flash,addr, CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+					spi_flash_erase (flash,addr, gb_erase_block_size_long);
 					continue;
 				}	
 				break;
diff -Naur uboot_old/oem/ami/ipmi/cmdhandler.c uboot_new/oem/ami/ipmi/cmdhandler.c
--- uboot_old/oem/ami/ipmi/cmdhandler.c	2023-12-04 15:54:09.098650169 +0530
+++ uboot_new/oem/ami/ipmi/cmdhandler.c	2023-12-04 15:48:27.930272852 +0530
@@ -81,7 +81,19 @@
      unsigned char *Nextenv;
      uchar *env,*nxt = NULL;
 
-     uchar *env_data = (uchar *)(CONFIG_SPX_FEATURE_GLOBAL_UBOOT_ENV_START + 4);
+     unsigned long gb_uboot_env_start_long=0;
+     char gb_uboot_env_start[MAX_FLASH_SIZE];
+     memset(gb_uboot_env_start,0,sizeof(gb_uboot_env_start));
+     if(get_uboot_macro("global-uboot-env-start",gb_uboot_env_start) == 0)
+     {
+	     gb_uboot_env_start_long = simple_strtoull(gb_uboot_env_start, NULL, MAX_FLASH_SIZE);
+     }
+     else
+     {
+	     printf(" read fail from get_uboot_macro \n");
+	     return -ENODEV;
+     }
+     uchar *env_data = (uchar *)(gb_uboot_env_start_long + 4);
      Nextenv = VarName;
      for (env=env_data; *env; env=nxt+1)
      {
@@ -257,6 +269,12 @@
     unsigned int Major,Minor;
 	unsigned char MfgID [3] = MFG_ID_AMI;
 	struct spi_flash *flash;
+	unsigned long gb_used_flash_size_long=0;
+        unsigned long gb_erase_block_size_long=0;
+        char erase_blaock_size[MAX_FLASH_SIZE];
+        char gb_used_flash_size[MAX_FLASH_SIZE];
+        memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+        memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
 	
 	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
                         CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
@@ -265,8 +283,26 @@
         puts("\nspi_flash_probe failed");
         hang();
     }
-	FMHPtr = ScanforFMH(flash,(CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE-CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE), 
-			(unsigned long)CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+	if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+    {
+            gb_erase_block_size_long=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
+    if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+    {
+            gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
+	FMHPtr = ScanforFMH(flash,(gb_used_flash_size_long-gb_erase_block_size_long),
+			(unsigned long)gb_erase_block_size_long);
 	if (FMHPtr == NULL)
 	{
 		printf ("FMH not found\n");
@@ -322,14 +358,50 @@
 	AMIYAFUGetFlashInfoReq_T *pAMIYAFUFlashInfoReq = (AMIYAFUGetFlashInfoReq_T *)pReq;
     AMIYAFUGetFlashInfoRes_T* pAMIYAFUGetFlashInfo = (AMIYAFUGetFlashInfoRes_T*)pRes;  
 
-     	
+   	unsigned long gb_used_flash_size_long=0;
+        unsigned long gb_erase_block_size_long=0;
+        unsigned long gb_erase_block_start_long=0;
+        char erase_blaock_size[MAX_FLASH_SIZE];
+        char gb_used_flash_size[MAX_FLASH_SIZE];
+        char gb_used_flash_start[MAX_FLASH_SIZE];
+        memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+        memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+        memset(gb_used_flash_start,0,sizeof(gb_used_flash_start));
+        if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+        {
+                gb_erase_block_size_long=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+        if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+        {
+                gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+        if(get_flash_macro("global-used-flash-start",gb_used_flash_start) == 0)
+        {
+                gb_erase_block_start_long = simple_strtoull(gb_used_flash_start, NULL, MAX_FLASH_SIZE);
+        }
+        else
+        {
+                printf(" read fail from get_flash_macro \n");
+		return -ENODEV;
+        }
+	    
 	pAMIYAFUGetFlashInfo->CompletionCode = YAFU_CC_NORMAL;
     pAMIYAFUGetFlashInfo->FlashInfoRes.Seqnum = pAMIYAFUFlashInfoReq->FlashInfoReq.Seqnum;
 	pAMIYAFUGetFlashInfo->FlashInfoRes.YafuCmd= pAMIYAFUFlashInfoReq->FlashInfoReq.YafuCmd;
 	
-	pAMIYAFUGetFlashInfo->FlashInfo.FlashSize = CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
-	pAMIYAFUGetFlashInfo->FlashInfo.FlashAddress = CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_START;
-	pAMIYAFUGetFlashInfo->FlashInfo.FlashEraseBlkSize = CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE;
+	pAMIYAFUGetFlashInfo->FlashInfo.FlashSize = gb_used_flash_size_long;
+	pAMIYAFUGetFlashInfo->FlashInfo.FlashAddress = gb_erase_block_start_long;
+        pAMIYAFUGetFlashInfo->FlashInfo.FlashEraseBlkSize = gb_erase_block_size_long;
 	pAMIYAFUGetFlashInfo->FlashInfo.FlashProductID = 0; 
 	pAMIYAFUGetFlashInfo->FlashInfo.FlashWidth = 8;  
 	pAMIYAFUGetFlashInfo->FlashInfo.FMHCompliance = 0x01;
@@ -338,7 +410,7 @@
 		FMHComp = 1;
 	
     pAMIYAFUGetFlashInfo->FlashInfo.Reserved = 0;
-	pAMIYAFUGetFlashInfo->FlashInfo.NoEraseBlks = CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE; 
+	pAMIYAFUGetFlashInfo->FlashInfo.NoEraseBlks = gb_used_flash_size_long/gb_erase_block_size_long; 
 
     if((pAMIYAFUGetFlashInfo->FlashInfo.NoEraseBlks * pAMIYAFUGetFlashInfo->FlashInfo.FlashEraseBlkSize) == pAMIYAFUGetFlashInfo->FlashInfo.FlashSize)
 	{
@@ -368,6 +440,30 @@
       DWORD StartFlashAddr = 0;
 	  struct spi_flash *flash;
     
+      unsigned long gb_erase_block_size_long=0;
+      unsigned long gb_used_flash_size_long=0;
+      char erase_blaock_size[MAX_FLASH_SIZE];
+      char gb_used_flash_size[MAX_FLASH_SIZE];
+      memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+      memset(gb_used_flash_size,0,sizeof(gb_used_flash_size));
+      if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+      {
+              gb_erase_block_size_long=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+      }
+      else
+      {
+              printf(" read fail from get_flash_macro \n");
+	      return -ENODEV;
+      }
+      if(get_flash_macro("global-used-flash-size",gb_used_flash_size) == 0)
+      {
+              gb_used_flash_size_long = simple_strtoull(gb_used_flash_size, NULL, MAX_FLASH_SIZE);
+      }
+      else
+      {
+              printf(" read fail from get_flash_macro \n");
+	      return -ENODEV;
+      }
 
       AMIYAFUGetFMHInfoReq_T *pAMIYAFUGetFMHInfoReq = (AMIYAFUGetFMHInfoReq_T *)pReq;
       AMIYAFUGetFMHInfoRes_T* pAMIYAFUGetFMHInfo = (AMIYAFUGetFMHInfoRes_T*)pRes;
@@ -382,7 +478,7 @@
       }
 
       if(gFWUploadSelector == IMAGE_2)	
-	  	StartFlashAddr =  CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE;
+	  	StartFlashAddr =  gb_used_flash_size_long;
 	
 	flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
                         CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
@@ -392,7 +488,7 @@
         hang();
     }
 
-	for(i=0;i<(CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE/CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);i++) 			
+	for(i=0;i<(gb_used_flash_size_long/gb_erase_block_size_long);i++)	
    {
 	Buf= (INT8U *)malloc(64);
 
@@ -411,7 +507,7 @@
    	}
 
 
-       if(spi_flash_read(flash, StartFlashAddr + (i*CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE),64,(char *)Buf) != 0)
+       if(spi_flash_read(flash, StartFlashAddr + (i*gb_erase_block_size_long),64,(char *)Buf) != 0)
 	{
 
 		AMIYAFUNotAck* pAMIYAFUNotAcknowledge =(AMIYAFUNotAck*)pRes;
@@ -447,8 +543,8 @@
       else
       {
 
-         if(spi_flash_read(flash, StartFlashAddr + ((i*CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE) +(CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE -sizeof(AltFmh))),sizeof(AltFmh),(char*)Buf) != 0)
-		{
+        if(spi_flash_read(flash, StartFlashAddr + ((i*gb_erase_block_size_long) +(gb_erase_block_size_long -sizeof(AltFmh))),sizeof(AltFmh),(char*)Buf) != 0)
+	{
 
 			AMIYAFUNotAck* pAMIYAFUNotAcknowledge =(AMIYAFUNotAck*)pRes;
 			pAMIYAFUNotAcknowledge->NotAck.Seqnum = pAMIYAFUGetFMHInfoReq->FMHReq.Seqnum;
@@ -465,8 +561,8 @@
              if(strncmp((char *)AltFmh.Signature,"$MODULE$",(sizeof(AltFmh.Signature) -1)) == 0 )	//Check FMH Signature
              	{
 			 
-	         	if(spi_flash_read(flash, StartFlashAddr + (i*CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE) +AltFmh.LinkAddress,64,(char *)Buf) != 0)
-				{
+	         	if(spi_flash_read(flash, StartFlashAddr + (i*gb_erase_block_size_long) +AltFmh.LinkAddress,64,(char *)Buf) != 0)
+			{
 
 					AMIYAFUNotAck* pAMIYAFUNotAcknowledge =(AMIYAFUNotAck*)pRes;
 					pAMIYAFUNotAcknowledge->NotAck.Seqnum = pAMIYAFUGetFMHInfoReq->FMHReq.Seqnum;
@@ -619,6 +715,19 @@
     AMIYAFUProtectFlashReq_T *pAMIYAFUProtectFlashReq = (AMIYAFUProtectFlashReq_T *)pReq;
     struct spi_flash *flash;
     int retval = -1;
+	
+    unsigned long gb_erase_block_size_long=0;
+    char erase_blaock_size[MAX_FLASH_SIZE];
+    memset(erase_blaock_size,0,sizeof(erase_blaock_size));
+    if(get_flash_macro("global-erase-block-size",erase_blaock_size) == 0)
+    {
+            gb_erase_block_size_long=simple_strtoull(erase_blaock_size, NULL, MAX_FLASH_SIZE);
+    }
+    else
+    {
+            printf(" read fail from get_flash_macro \n");
+	    return -ENODEV;
+    }
 
 if(ActivateFlashStatus == 0x01)
 {
@@ -661,7 +770,7 @@
             hang();
         }
 
-     retval = spi_flash_protect (flash, CONFIG_ENV_SPI_CS, CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE, 0);
+     retval = spi_flash_protect (flash, CONFIG_ENV_SPI_CS, gb_erase_block_size_long, 0);
      if ((0 != retval) && (-EOPNOTSUPP != retval))
      {
 	   AMIYAFUNotAck* pAMIYAFUNotAcknowledge =(AMIYAFUNotAck*)pRes;
diff -Naur uboot_old/oem/Makefile uboot_new/oem/Makefile
--- uboot_old/oem/Makefile	2023-12-04 15:54:09.098650169 +0530
+++ uboot_new/oem/Makefile	2023-12-04 15:48:27.938272807 +0530
@@ -1,3 +1,4 @@
+obj-y += ami/fdt/
 obj-y += ami/fmh/
 ifndef CONFIG_SPL_BUILD
 obj-y += ami/ncsi/
@@ -22,4 +23,4 @@
 ifeq ($(CONFIG_SPX_FEATURE_GLOBAL_FRAME_BUFFER_SUPPORT),"YES")
 obj-y += ami/bootlogo/
 endif
-endif
\ No newline at end of file
+endif
